<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FullImplementaionAPI</name>
    </assembly>
    <members>
        <member name="M:FullImplementaionAPI.Controlers.MapsController.GetAllMaps">
            <summary>
            Gets all maps.
            </summary>
            <returns>A list of all maps.</returns>
        </member>
        <member name="M:FullImplementaionAPI.Controlers.MapsController.GetSquareMaps">
            <summary>
            Gets all square maps (where Columns == Rows).
            </summary>
            <returns>A list of square maps.</returns>
            <response code="200">Returns the list of square maps</response>
            <response code="404">If no square maps are found</response>
        </member>
        <member name="M:FullImplementaionAPI.Controlers.MapsController.GetMapById(System.Int32)">
            <summary>
            Gets a map by its ID.
            </summary>
            <param name="id">The ID of the map.</param>
            <returns>The map with the given ID.</returns>
            <response code="200">Returns the requested map</response>
            <response code="404">If the map with the given ID does not exist</response>
        </member>
        <member name="M:FullImplementaionAPI.Controlers.MapsController.PostMap(MapController.Map)">
             <summary>
             Creates a new map.
             </summary>
             <param name="map">The map object to create.</param>
             <returns>The created map object.</returns>
             <remarks>
             Sample request:
            
             POST /api/maps
             {
               "name": "Moon Surface",
               "columns": 5,
               "rows": 5
             }
             </remarks>
             <response code="201">Returns the newly created map</response>
             <response code="400">If map is invalid or too small</response>
             <response code="409">If a map with the same name already exists</response>
        </member>
        <member name="M:FullImplementaionAPI.Controlers.MapsController.UpdateMap(System.Int32,MapController.Map)">
            <summary>
            Updates an existing map.
            </summary>
            <param name="id">The ID of the map to update.</param>
            <param name="updatedMap">The updated map object.</param>
            <response code="204">If the map was updated successfully</response>
            <response code="400">If map data is invalid</response>
            <response code="404">If the map with the given ID does not exist</response>
            <response code="409">If another map with the same name already exists</response>
        </member>
        <member name="M:FullImplementaionAPI.Controlers.MapsController.DeleteMap(System.Int32)">
            <summary>
            Deletes a map by its ID.
            </summary>
            <param name="id">The ID of the map to delete.</param>
            <response code="204">If the map was deleted successfully</response>
            <response code="404">If the map with the given ID does not exist</response>
        </member>
        <member name="M:FullImplementaionAPI.Controlers.MapsController.CheckCoordinate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if given coordinates exist within the map boundaries.
            </summary>
            <param name="id">The ID of the map.</param>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <returns>True if the coordinates are on the map; otherwise false.</returns>
            <response code="200">Returns whether the coordinates are on the map</response>
            <response code="400">If coordinates are negative</response>
            <response code="404">If the map does not exist</response>
        </member>
        <member name="M:FullImplementaionAPI.Controlers.RobotCommandsController.GetAllRobotCommands">
            <summary>
            Retrieves all robot commands.
            </summary>
            <returns>A list of all robot commands.</returns>
        </member>
        <member name="M:FullImplementaionAPI.Controlers.RobotCommandsController.GetMoverCommandsOnly">
            <summary>
            Retrieves only robot commands that involve movement.
            </summary>
            <returns>A list of move commands if found; otherwise, a NotFound response.</returns>
        </member>
        <member name="M:FullImplementaionAPI.Controlers.RobotCommandsController.GetRobotCommandById(System.Int32)">
            <summary>
            Retrieves a robot command by its ID.
            </summary>
            <param name="id">The ID of the robot command.</param>
            <returns>The robot command if found; otherwise, a NotFound response.</returns>
        </member>
        <member name="M:FullImplementaionAPI.Controlers.RobotCommandsController.AddRobotCommand(robot_controller_api.RobotCommand)">
            <summary>
            Adds a new robot command.
            </summary>
            <param name="newCommand">The robot command to add.</param>
            <returns>A Created response with the new robot command, or an error if invalid or duplicate.</returns>
        </member>
        <member name="M:FullImplementaionAPI.Controlers.RobotCommandsController.UpdateRobotCommand(System.Int32,robot_controller_api.RobotCommand)">
            <summary>
            Updates an existing robot command.
            </summary>
            <param name="id">The ID of the robot command to update.</param>
            <param name="updatedCommand">The updated robot command data.</param>
            <returns>NoContent if successful; otherwise, appropriate error responses.</returns>
        </member>
        <member name="M:FullImplementaionAPI.Controlers.RobotCommandsController.DeleteRobotCommand(System.Int32)">
            <summary>
            Deletes a robot command by its ID.
            </summary>
            <param name="id">The ID of the robot command to delete.</param>
            <returns>NoContent if successful; otherwise, a NotFound response.</returns>
        </member>
    </members>
</doc>
